name: React Build & Deploy to S3 and EC2

on:
  push:
    branches: [ main ]

env:
  NODE_VERSION: "20"
  S3_BUCKET: ${{ secrets.S3_BUCKET }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install deps (repo)
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Build frontend
        run: npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Upload dist (frontend) to S3
        run: |
          aws s3 sync dist/ s3://${{ env.S3_BUCKET }}/frontend --delete

      - name: Upload server sources to S3 (no node_modules, no dist)
        run: |
          aws s3 sync . s3://${{ env.S3_BUCKET }}/server \
            --exclude "dist/*" \
            --exclude "node_modules/*" \
            --exclude ".git/*" \
            --delete

      - name: Trigger EC2 update via SSM
        run: |
          set -e

          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "${{ env.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "set -e",

              "# 1) Go to app directory",
              "cd /home/brewpost/brewpost",

              "# 2) Pull latest server files from S3",
              "aws s3 sync s3://${{ env.S3_BUCKET }}/server . --exclude dist/* --exclude node_modules/* --delete",

              "# 3) Ensure package files exist",
              "[ -f package.json ] || { echo \"package.json missing in /home/brewpost/brewpost\"; exit 1; }",

              "# 4) Install production deps",
              "if [ -f package-lock.json ]; then NODE_ENV=production npm ci --omit=dev; else NODE_ENV=production npm install --omit=dev; fi",

              "# 5) Refresh .env from Secrets Manager (SecretId = env)",
              "aws secretsmanager get-secret-value --secret-id env --query SecretString --output text > .env",

              "# 6) Sync built frontend into ./dist",
              "rm -rf dist/*",
              "aws s3 sync s3://${{ env.S3_BUCKET }}/frontend dist --delete",

              "# 7) Restart the node app",
              "pkill -f unified-server.js || true",
              "nohup node unified-server.js > server.log 2>&1 &",

              "# 8) Reload Nginx if present (non-fatal)",
              "sudo systemctl reload nginx || true"
            ]' \
            --region "${{ env.AWS_REGION }}" \
            --query 'Command.CommandId' \
            --output text)

          echo "SSM Command ID: $COMMAND_ID"
          echo "Waiting for command to finishâ€¦"

          aws ssm wait command-executed \
            --command-id "$COMMAND_ID" \
            --instance-id "${{ env.EC2_INSTANCE_ID }}" \
            --region "${{ env.AWS_REGION }}"

          echo "---- SSM Output ----"
          aws ssm list-command-invocations \
            --command-id "$COMMAND_ID" \
            --details \
            --region "${{ env.AWS_REGION }}" \
            --query "CommandInvocations[0].CommandPlugins[].{Name:Name,Output:Output,Status:Status}" \
            --output table
