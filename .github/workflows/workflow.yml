name: React Build & Deploy to S3 and EC2

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Create .env for build
        run: |
          echo "VITE_BACKEND_URL=${{ secrets.VITE_BACKEND_URL }}" >> .env
          echo "VITE_REDIRECT_URI=${{ secrets.VITE_REDIRECT_URI }}" >> .env
          echo "VITE_FRONTEND_URL=${{ secrets.VITE_FRONTEND_URL }}" >> .env
          echo "VITE_COGNITO_DOMAIN=${{ secrets.VITE_COGNITO_DOMAIN }}" >> .env
          echo "VITE_COGNITO_CLIENT_ID=${{ secrets.VITE_COGNITO_CLIENT_ID }}" >> .env
          echo "VITE_APPSYNC2_URL=${{ secrets.VITE_APPSYNC2_URL }}" >> .env
          echo "VITE_APPSYNC2_API_KEY=${{ secrets.VITE_APPSYNC2_API_KEY }}" >> .env
          echo "VITE_APPSYNC_API_KEY=${{ secrets.VITE_APPSYNC_API_KEY }}" >> .env
          echo "VITE_PUBLIC_MEDIA_BASE=${{ secrets.VITE_PUBLIC_MEDIA_BASE }}" >> .env
          echo "VITE_MEDIA_BUCKET=${{ secrets.VITE_MEDIA_BUCKET }}" >> .env

      - name: Build project
        run: npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload to S3
        run: |
          # Upload frontend
          aws s3 rm s3://my-react-deploy-bucket/frontend --recursive
          aws s3 sync dist/ s3://my-react-deploy-bucket/frontend
          
          # Upload server
          aws s3 sync . s3://my-react-deploy-bucket/server \
            --exclude "dist/*" \
            --exclude "node_modules/*" \
            --exclude ".git/*" \
            --delete

      - name: Deploy to EC2
        run: |
          # Create a temporary script file
          cat > deploy.sh << 'EOL'
          #!/bin/bash
          set -e
          
          # Stop any running server
          pkill -f unified-server || true
          
          # Create directories
          mkdir -p /home/brewpost/brewpost/{server,dist,logs}
          
          # Sync server files
          echo "Syncing server files..."
          aws s3 sync s3://my-react-deploy-bucket/server /home/brewpost/brewpost/server \
            --exclude "dist/*" \
            --exclude "node_modules/*" \
            --delete
          
          # Install dependencies
          echo "Installing dependencies..."
          cd /home/brewpost/brewpost/server
          rm -rf node_modules package-lock.json
          npm install --omit=dev
          
          # Sync frontend files
          echo "Syncing frontend files..."
          rm -rf /home/brewpost/brewpost/dist/*
          aws s3 sync s3://my-react-deploy-bucket/frontend /home/brewpost/brewpost/dist
          
          # Set permissions
          echo "Setting permissions..."
          sudo chown -R www-data:www-data /home/brewpost/brewpost/dist
          sudo chmod -R 755 /home/brewpost/brewpost/dist
          
          # Start server
          echo "Starting server..."
          cd /home/brewpost/brewpost/server
          nohup node unified-server.js > /home/brewpost/brewpost/logs/server.log 2>&1 &
          
          # Reload nginx
          echo "Reloading nginx..."
          sudo systemctl reload nginx || true
          
          echo "Deployment completed!"
          EOL
          
          # Upload the script to S3
          aws s3 cp deploy.sh s3://my-react-deploy-bucket/deploy.sh
          
          # Execute the script on EC2
          aws ssm send-command \
            --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "aws s3 cp s3://my-react-deploy-bucket/deploy.sh /tmp/deploy.sh",
              "chmod +x /tmp/deploy.sh",
              "/tmp/deploy.sh > /tmp/deploy.log 2>&1"
            ]' \
            --region ${{ secrets.AWS_REGION }}